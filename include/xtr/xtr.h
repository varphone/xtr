#ifndef XTR_XTR_H
#define XTR_XTR_H

/* Generated with cbindgen:0.24.3 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/// 一个代表打包的值的类型的枚举。
enum PackedValueKind
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
    I8 = 129,
    I16 = 130,
    I32 = 132,
    I64 = 136,
    U8 = 1,
    U16 = 2,
    U32 = 4,
    U64 = 8,
    F32 = 68,
    F64 = 72,
    Unknown = 255,
};
#ifndef __cplusplus
typedef uint8_t PackedValueKind;
#endif // __cplusplus

typedef struct Arc_ClientWrapper Arc_ClientWrapper;

typedef struct Arc_Packet Arc_Packet;

typedef struct Option_XtrClientPacketHandler Option_XtrClientPacketHandler;

typedef struct Option_XtrClientStateHandler Option_XtrClientStateHandler;

typedef struct PackedItemIter PackedItemIter;

typedef struct PackedValues PackedValues;

typedef struct Arc_ClientWrapper XtrClient;

typedef XtrClient *XtrClientPtr;

typedef struct Arc_Packet XtrPacketRef;

typedef struct PackedValues XtrPackedValuesRef;

typedef struct PackedItemIter XtrPackedItemIterRef;

typedef struct PackedItem {
    uint16_t addr;
    PackedValueKind kind;
    uint8_t elms;
} PackedItem;

typedef struct PackedItem XtrPackedItem;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/// # Safety
void XtrInitialize(void);

/// # Safety
void XtrFinalize(void);

/// # Safety
XtrClientPtr XtrClientNew(const char *addr, uint32_t _flags);

/// # Safety
XtrClientPtr XtrClientAddRef(XtrClientPtr xtr);

/// # Safety
void XtrClientRelease(XtrClientPtr xtr);

/// # Safety
int32_t XtrClientPostPacket(XtrClientPtr xtr, XtrPacketRef *packet);

/// # Safety
int32_t XtrClientTryPostPacket(XtrClientPtr xtr, XtrPacketRef *packet);

/// # Safety
XtrPacketRef *XtrClientSendPacket(XtrClientPtr xtr, XtrPacketRef *packet);

/// # Safety
void XtrClientSetPacketCB(XtrClientPtr xtr, struct Option_XtrClientPacketHandler cb, void *opaque);

/// # Safety
void XtrClientSetStateCB(XtrClientPtr xtr, struct Option_XtrClientStateHandler cb, void *opaque);

/// # Safety
int32_t XtrClientStart(XtrClientPtr xtr);

/// # Safety
int32_t XtrClientStop(XtrClientPtr xtr);

/// # Safety
XtrPacketRef *XtrPacketNewData(uint32_t length, uint8_t flags, uint32_t stream_id);

/// # Safety
XtrPacketRef *XtrPacketNewPackedValues(const XtrPackedValuesRef *pv,
                                       uint8_t flags,
                                       uint32_t stream_id);

/// # Safety
XtrPacketRef *XtrPacketAddRef(XtrPacketRef *packet);

/// # Safety
void XtrPacketRelease(XtrPacketRef *packet);

/// # Safety
uint8_t XtrPacketGetFlags(const XtrPacketRef *packet);

/// # Safety
uint32_t XtrPacketGetLength(const XtrPacketRef *packet);

/// # Safety
uint32_t XtrPacketGetSequence(const XtrPacketRef *packet);

/// # Safety
uint32_t XtrPacketGetStreamId(const XtrPacketRef *packet);

/// # Safety
uint64_t XtrPacketGetTimestamp(const XtrPacketRef *packet);

/// # Safety
uint8_t XtrPacketGetType(const XtrPacketRef *packet);

/// # Safety
const uint8_t *XtrPacketGetConstData(const XtrPacketRef *packet);

/// # Safety
uint8_t *XtrPacketGetData(const XtrPacketRef *packet);

/// # Safety
XtrPackedValuesRef *XtrPackedValuesNew(void);

/// # Safety
XtrPackedValuesRef *XtrPackedValuesWithBytes(const uint8_t *data, uint32_t length);

/// # Safety
void XtrPackedValuesRelease(XtrPackedValuesRef *pv);

/// # Safety
int32_t XtrPackedValuesGetI8(XtrPackedValuesRef *pv, uint16_t addr, int8_t *val);

/// # Safety
int32_t XtrPackedValuesGetI16(XtrPackedValuesRef *pv, uint16_t addr, int16_t *val);

/// # Safety
int32_t XtrPackedValuesGetI32(XtrPackedValuesRef *pv, uint16_t addr, int32_t *val);

/// # Safety
int32_t XtrPackedValuesGetI64(XtrPackedValuesRef *pv, uint16_t addr, int64_t *val);

/// # Safety
int32_t XtrPackedValuesGetI8s(XtrPackedValuesRef *pv, uint16_t addr, int8_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetI16s(XtrPackedValuesRef *pv, uint16_t addr, int16_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetI32s(XtrPackedValuesRef *pv, uint16_t addr, int32_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetI64s(XtrPackedValuesRef *pv, uint16_t addr, int64_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU8(XtrPackedValuesRef *pv, uint16_t addr, uint8_t *val);

/// # Safety
int32_t XtrPackedValuesGetU16(XtrPackedValuesRef *pv, uint16_t addr, uint16_t *val);

/// # Safety
int32_t XtrPackedValuesGetU32(XtrPackedValuesRef *pv, uint16_t addr, uint32_t *val);

/// # Safety
int32_t XtrPackedValuesGetU64(XtrPackedValuesRef *pv, uint16_t addr, uint64_t *val);

/// # Safety
int32_t XtrPackedValuesGetU8s(XtrPackedValuesRef *pv, uint16_t addr, uint8_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU16s(XtrPackedValuesRef *pv, uint16_t addr, uint16_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU32s(XtrPackedValuesRef *pv, uint16_t addr, uint32_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU64s(XtrPackedValuesRef *pv, uint16_t addr, uint64_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetF32(XtrPackedValuesRef *pv, uint16_t addr, float *val);

/// # Safety
int32_t XtrPackedValuesGetF64(XtrPackedValuesRef *pv, uint16_t addr, double *val);

/// # Safety
int32_t XtrPackedValuesGetF32s(XtrPackedValuesRef *pv, uint16_t addr, float *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetF64s(XtrPackedValuesRef *pv, uint16_t addr, double *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI8(XtrPackedValuesRef *pv, uint16_t addr, int8_t val);

/// # Safety
int32_t XtrPackedValuesPutI16(XtrPackedValuesRef *pv, uint16_t addr, int16_t val);

/// # Safety
int32_t XtrPackedValuesPutI32(XtrPackedValuesRef *pv, uint16_t addr, int32_t val);

/// # Safety
int32_t XtrPackedValuesPutI64(XtrPackedValuesRef *pv, uint16_t addr, int64_t val);

/// # Safety
int32_t XtrPackedValuesPutI8s(XtrPackedValuesRef *pv,
                              uint16_t addr,
                              const int8_t *vals,
                              uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI16s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const int16_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI32s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const int32_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI64s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const int64_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU8(XtrPackedValuesRef *pv, uint16_t addr, uint8_t val);

/// # Safety
int32_t XtrPackedValuesPutU16(XtrPackedValuesRef *pv, uint16_t addr, uint16_t val);

/// # Safety
int32_t XtrPackedValuesPutU32(XtrPackedValuesRef *pv, uint16_t addr, uint32_t val);

/// # Safety
int32_t XtrPackedValuesPutU64(XtrPackedValuesRef *pv, uint16_t addr, uint64_t val);

/// # Safety
int32_t XtrPackedValuesPutU8s(XtrPackedValuesRef *pv,
                              uint16_t addr,
                              const uint8_t *vals,
                              uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU16s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const uint16_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU32s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const uint32_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU64s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const uint64_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutF32(XtrPackedValuesRef *pv, uint16_t addr, float val);

/// # Safety
int32_t XtrPackedValuesPutF64(XtrPackedValuesRef *pv, uint16_t addr, double val);

/// # Safety
int32_t XtrPackedValuesPutF32s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const float *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutF64s(XtrPackedValuesRef *pv,
                               uint16_t addr,
                               const double *vals,
                               uint16_t num);

/// # Safety
XtrPackedItemIterRef *XtrPackedValuesItemIter(XtrPackedValuesRef *pv);

/// # Safety
void XtrPackedValuesItemIterRelease(XtrPackedItemIterRef *iter);

/// # Safety
XtrPackedItem XtrPackedValuesItemNext(XtrPackedItemIterRef *iter);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* XTR_XTR_H */
