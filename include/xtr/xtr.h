#ifndef XTR_XTR_H
#define XTR_XTR_H

/* Generated with cbindgen:0.24.3 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/// 一个代表客户端状态的枚举。
enum XtrClientState
#ifdef __cplusplus
  : uint32_t
#endif // __cplusplus
 {
    /// 连接成功。
    XTR_CLIENT_STATE_CONNECTED,
    /// 连接出现异常。
    XTR_CLIENT_STATE_CONNECT_ERROR,
    /// 连接超时。
    XTR_CLIENT_STATE_CONNECT_TIMEOUT,
    /// 已经断开连接。
    XTR_CLIENT_STATE_DISCONNECTED,
    /// 尝试重新连接。
    XTR_CLIENT_STATE_TRY_RECONNECT,
};
#ifndef __cplusplus
typedef uint32_t XtrClientState;
#endif // __cplusplus

/// 一个代表数据包类型的枚举。
enum XtrPacketType
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
    XTR_PACKET_TYPE_DATA = 0,
    XTR_PACKET_TYPE_HEADERS = 1,
    XTR_PACKET_TYPE_PRIORITY = 2,
    XTR_PACKET_TYPE_RESET = 3,
    XTR_PACKET_TYPE_SETTINGS = 4,
    XTR_PACKET_TYPE_PUSH_PROMISE = 5,
    XTR_PACKET_TYPE_PING = 6,
    XTR_PACKET_TYPE_GO_AWAY = 7,
    XTR_PACKET_TYPE_WINDOW_UPDATE = 8,
    XTR_PACKET_TYPE_CONTINUATION = 9,
    XTR_PACKET_TYPE_BIN_CODE = 10,
    XTR_PACKET_TYPE_JSON = 11,
    XTR_PACKET_TYPE_PACKED_VALUES = 12,
    XTR_PACKET_TYPE_UNKNOWN,
};
#ifndef __cplusplus
typedef uint8_t XtrPacketType;
#endif // __cplusplus

typedef struct XtrPacketArced XtrPacketArced;

typedef struct XtrClientArced XtrClientArced;

/// 一个代表打包的值表的条目的迭代器的类型。
typedef struct XtrPackedItemIter XtrPackedItemIter;

/// 一个代表打包的值表的类型。
typedef struct XtrPackedValues XtrPackedValues;

/// 一个代表 XTR 客户端实例智能指针的类型。
typedef struct XtrClientArced XtrClientRef;

/// 一个代表 XTR 客户端实例可写指针的类型。
typedef XtrClientRef *XtrClientPtr;

/// 一个代表数据包智能指针的类型。
typedef struct XtrPacketArced XtrPacketRef;

/// 一个代表数据包可写指针的类型。
typedef XtrPacketRef *XtrPacketPtr;

/// 一个代表客户端数据包回调的类型。
typedef void (*XtrClientPacketHandler)(XtrPacketPtr, void*);

/// 一个代表客户端状态的枚举。
typedef XtrClientState XtrClientState;

/// 一个代表客户端状态回调的类型。
typedef void (*XtrClientStateHandler)(XtrClientState, void*);

/// 一个代表打包的值表的只读指针的类型。
typedef const struct XtrPackedValues *XtrPackedValuesConstPtr;

/// 一个代表数据包只读指针的类型。
typedef const XtrPacketRef *XtrPacketConstPtr;

/// 一个代表打包的值表的可写指针的类型。
typedef struct XtrPackedValues *XtrPackedValuesPtr;

/// 一个代表打包的值表的迭代器的可写指针的类型。
typedef struct XtrPackedItemIter *XtrPackedItemIterPtr;

/// 一个代表打包的值表的条目的类型。
typedef struct XtrPackedItem {
    /// 值的地址。
    uint16_t addr;
    /// 值的类型。
    uint8_t kind;
    /// 值的个数。
    uint8_t elms;
} XtrPackedItem;

/// 一个代表数据包标志位的类型。
typedef struct XtrPacketFlags {
    uint8_t bits;
} XtrPacketFlags;
#define XtrPacketFlags_END_STREAM (XtrPacketFlags){ .bits = (uint8_t)1 }
#define XtrPacketFlags_END_HEADERS (XtrPacketFlags){ .bits = (uint8_t)4 }
#define XtrPacketFlags_PADDED (XtrPacketFlags){ .bits = (uint8_t)8 }
#define XtrPacketFlags_PRIORITY (XtrPacketFlags){ .bits = (uint8_t)32 }
#define XtrPacketFlags_READONLY (XtrPacketFlags){ .bits = (uint8_t)64 }
#define XtrPacketFlags_ALL (XtrPacketFlags){ .bits = (uint8_t)(((((XtrPacketFlags_END_STREAM).bits | (XtrPacketFlags_END_HEADERS).bits) | (XtrPacketFlags_PADDED).bits) | (XtrPacketFlags_PRIORITY).bits) | (XtrPacketFlags_READONLY).bits) }

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/// 初始化 XTR 框架。
/// # Safety
void XtrInitialize(void);

/// 释放 XTR 框架。
/// # Safety
void XtrFinalize(void);

/// 创建客户端实例。
/// # Safety
XtrClientPtr XtrClientNew(const char *addr, uint32_t _flags);

/// 增加客户端实例引用计数。
/// # Safety
XtrClientPtr XtrClientAddRef(XtrClientPtr xtr);

/// 减少客户端实例引用计数，当减到 0 时会释放资源。
/// # Safety
void XtrClientRelease(XtrClientPtr xtr);

/// 向客户端连接推入一个数据包并立即返回。
///
/// 推入的数据包会存放在队列中由后台按顺序发送到连接的远端。
/// # Safety
int32_t XtrClientPostPacket(XtrClientPtr xtr, XtrPacketPtr packet);

/// 尝试向客户端连接推入一个数据包并立即返回。
///
/// 推入的数据包会存放在队列中由后台按顺序发送到连接的远端。
/// # Safety
int32_t XtrClientTryPostPacket(XtrClientPtr xtr, XtrPacketPtr packet);

/// 向客户端连接发送一个数据包并等待返回。
/// # Safety
XtrPacketPtr XtrClientSendPacket(XtrClientPtr xtr, XtrPacketPtr packet);

/// 设置客户端实例数据包回调。
/// # Safety
void XtrClientSetPacketCB(XtrClientPtr xtr, XtrClientPacketHandler cb, void *opaque);

/// 设置客户端实例状态回调。
/// # Safety
void XtrClientSetStateCB(XtrClientPtr xtr, XtrClientStateHandler cb, void *opaque);

/// 启动客户端实例。
/// # Safety
int32_t XtrClientStart(XtrClientPtr xtr);

/// 停止客户端实例。
/// # Safety
int32_t XtrClientStop(XtrClientPtr xtr);

/// # Safety
XtrPacketPtr XtrPacketNewData(uint32_t length, uint8_t flags, uint32_t stream_id);

/// # Safety
XtrPacketPtr XtrPacketNewPackedValues(XtrPackedValuesConstPtr pv,
                                      uint8_t flags,
                                      uint32_t stream_id);

/// # Safety
XtrPacketPtr XtrPacketAddRef(XtrPacketPtr packet);

/// # Safety
void XtrPacketRelease(XtrPacketPtr packet);

/// # Safety
uint8_t XtrPacketGetFlags(XtrPacketConstPtr packet);

/// # Safety
uint32_t XtrPacketGetLength(XtrPacketConstPtr packet);

/// # Safety
uint32_t XtrPacketGetSequence(XtrPacketConstPtr packet);

/// # Safety
uint32_t XtrPacketGetStreamId(XtrPacketConstPtr packet);

/// # Safety
uint64_t XtrPacketGetTimestamp(XtrPacketConstPtr packet);

/// # Safety
uint8_t XtrPacketGetType(XtrPacketConstPtr packet);

/// # Safety
const uint8_t *XtrPacketGetConstData(XtrPacketConstPtr packet);

/// # Safety
uint8_t *XtrPacketGetData(XtrPacketConstPtr packet);

/// # Safety
XtrPackedValuesPtr XtrPackedValuesNew(void);

/// # Safety
XtrPackedValuesPtr XtrPackedValuesWithBytes(const uint8_t *data, uint32_t length);

/// # Safety
void XtrPackedValuesRelease(XtrPackedValuesPtr pv);

/// # Safety
int32_t XtrPackedValuesGetI8(XtrPackedValuesPtr pv, uint16_t addr, int8_t *val);

/// # Safety
int32_t XtrPackedValuesGetI16(XtrPackedValuesPtr pv, uint16_t addr, int16_t *val);

/// # Safety
int32_t XtrPackedValuesGetI32(XtrPackedValuesPtr pv, uint16_t addr, int32_t *val);

/// # Safety
int32_t XtrPackedValuesGetI64(XtrPackedValuesPtr pv, uint16_t addr, int64_t *val);

/// # Safety
int32_t XtrPackedValuesGetI8s(XtrPackedValuesPtr pv, uint16_t addr, int8_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetI16s(XtrPackedValuesPtr pv, uint16_t addr, int16_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetI32s(XtrPackedValuesPtr pv, uint16_t addr, int32_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetI64s(XtrPackedValuesPtr pv, uint16_t addr, int64_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU8(XtrPackedValuesPtr pv, uint16_t addr, uint8_t *val);

/// # Safety
int32_t XtrPackedValuesGetU16(XtrPackedValuesPtr pv, uint16_t addr, uint16_t *val);

/// # Safety
int32_t XtrPackedValuesGetU32(XtrPackedValuesPtr pv, uint16_t addr, uint32_t *val);

/// # Safety
int32_t XtrPackedValuesGetU64(XtrPackedValuesPtr pv, uint16_t addr, uint64_t *val);

/// # Safety
int32_t XtrPackedValuesGetU8s(XtrPackedValuesPtr pv, uint16_t addr, uint8_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU16s(XtrPackedValuesPtr pv, uint16_t addr, uint16_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU32s(XtrPackedValuesPtr pv, uint16_t addr, uint32_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetU64s(XtrPackedValuesPtr pv, uint16_t addr, uint64_t *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetF32(XtrPackedValuesPtr pv, uint16_t addr, float *val);

/// # Safety
int32_t XtrPackedValuesGetF64(XtrPackedValuesPtr pv, uint16_t addr, double *val);

/// # Safety
int32_t XtrPackedValuesGetF32s(XtrPackedValuesPtr pv, uint16_t addr, float *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesGetF64s(XtrPackedValuesPtr pv, uint16_t addr, double *vals, uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI8(XtrPackedValuesPtr pv, uint16_t addr, int8_t val);

/// # Safety
int32_t XtrPackedValuesPutI16(XtrPackedValuesPtr pv, uint16_t addr, int16_t val);

/// # Safety
int32_t XtrPackedValuesPutI32(XtrPackedValuesPtr pv, uint16_t addr, int32_t val);

/// # Safety
int32_t XtrPackedValuesPutI64(XtrPackedValuesPtr pv, uint16_t addr, int64_t val);

/// # Safety
int32_t XtrPackedValuesPutI8s(XtrPackedValuesPtr pv,
                              uint16_t addr,
                              const int8_t *vals,
                              uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI16s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const int16_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI32s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const int32_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutI64s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const int64_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU8(XtrPackedValuesPtr pv, uint16_t addr, uint8_t val);

/// # Safety
int32_t XtrPackedValuesPutU16(XtrPackedValuesPtr pv, uint16_t addr, uint16_t val);

/// # Safety
int32_t XtrPackedValuesPutU32(XtrPackedValuesPtr pv, uint16_t addr, uint32_t val);

/// # Safety
int32_t XtrPackedValuesPutU64(XtrPackedValuesPtr pv, uint16_t addr, uint64_t val);

/// # Safety
int32_t XtrPackedValuesPutU8s(XtrPackedValuesPtr pv,
                              uint16_t addr,
                              const uint8_t *vals,
                              uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU16s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const uint16_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU32s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const uint32_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutU64s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const uint64_t *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutF32(XtrPackedValuesPtr pv, uint16_t addr, float val);

/// # Safety
int32_t XtrPackedValuesPutF64(XtrPackedValuesPtr pv, uint16_t addr, double val);

/// # Safety
int32_t XtrPackedValuesPutF32s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const float *vals,
                               uint16_t num);

/// # Safety
int32_t XtrPackedValuesPutF64s(XtrPackedValuesPtr pv,
                               uint16_t addr,
                               const double *vals,
                               uint16_t num);

/// # Safety
XtrPackedItemIterPtr XtrPackedValuesItemIter(XtrPackedValuesPtr pv);

/// # Safety
void XtrPackedValuesItemIterRelease(XtrPackedItemIterPtr iter);

/// # Safety
struct XtrPackedItem XtrPackedValuesItemNext(XtrPackedItemIterPtr iter);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* XTR_XTR_H */
